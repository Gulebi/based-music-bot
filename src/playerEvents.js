const { EmbedBuilder, ButtonBuilder, ActionRowBuilder } = require("discord.js");

module.exports.registerPlayerEvents = (player) => {
    player.on("error", (queue, error) => {
        console.log(`[${queue.guild.name}] Error emitted from the queue: ${error.message}`);
    });

    player.on("connectionError", (queue, error) => {
        console.log(`[${queue.guild.name}] Error emitted from the connection: ${error.message}`);
    });

    player.on("trackStart", (queue, track) => {
        const source = queue.current.source;

        const embed =
            source == "spotify"
                ? new EmbedBuilder()
                      .setTitle("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç")
                      .setColor("#4188D2")
                      .setDescription(`üé∂ [\`${queue.current.title}\`](${queue.current.url})`)
                      .addFields(
                          { name: "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", value: `\`Someone\``, inline: true },
                          // { name: "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", value: queue.current.requestedBy.username, inline: true },
                          { name: "–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞", value: `\`${queue.current.author}\``, inline: true },
                          { name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞", value: `\`Unknown\``, inline: true }
                          //   { name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞", value: `\`${queue.current.duration}\``, inline: true }
                      )
                      .setThumbnail(queue.current.thumbnail)
                      .setFooter({ text: "Based Music Bot", iconURL: "https://i.imgur.com/0PCQtit.png" })
                : new EmbedBuilder()
                      .setTitle("–°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç")
                      .setColor("#4188D2")
                      .setDescription(`üé∂ [\`${queue.current.title}\`](${queue.current.url})`)
                      .setThumbnail(queue.current.thumbnail)
                      .addFields(
                          { name: "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", value: `\`Someone\``, inline: true },
                          // { name: "–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω", value: queue.current.requestedBy.username, inline: true },
                          { name: "–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞", value: `\`${queue.current.author}\``, inline: true },
                          { name: "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–∫–∞", value: `\`${queue.current.duration}\``, inline: true }
                      )
                      .setFooter({ text: "Based Music Bot", iconURL: "https://i.imgur.com/0PCQtit.png" });

        const backBtn = new ButtonBuilder().setLabel("Back").setCustomId("back").setStyle("Secondary").setEmoji("‚è™");

        const loopBtn = new ButtonBuilder()
            .setLabel("Off")
            .setCustomId("loop")
            .setStyle("Secondary")
            .setEmoji("905067815780888666");

        const resumePauseBtn = new ButtonBuilder()
            .setLabel("Pause")
            .setCustomId("resume&pause")
            .setStyle("Secondary")
            .setEmoji("‚è∏Ô∏è");

        const stopBtn = new ButtonBuilder().setLabel("Stop").setCustomId("stop").setStyle("Secondary").setEmoji("‚èπÔ∏è");

        const skipBtn = new ButtonBuilder().setLabel("Skip").setCustomId("skip").setStyle("Secondary").setEmoji("‚è©");

        const row = new ActionRowBuilder().addComponents(backBtn, loopBtn, resumePauseBtn, stopBtn, skipBtn);

        queue.metadata.send({ embeds: [embed], components: [row] });
    });

    player.on("trackAdd", (queue, track) => {
        const embed = new EmbedBuilder()
            .setTitle("–¢—Ä–µ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
            .setColor("#4188D2")
            .setDescription(`üé∂ [\`${track.title}\`](${track.url})`)
            .addFields({ name: "–ê–≤—Ç–æ—Ä —Ç—Ä–µ–∫–∞", value: `\`${track.author}\``, inline: true })
            .setThumbnail(track.thumbnail)
            .setFooter({ text: "Based Music Bot", iconURL: "https://i.imgur.com/0PCQtit.png" });

        queue.metadata.send({ embeds: [embed] });
    });

    player.on("botDisconnect", (queue) => {
        queue.metadata.send("–ú–µ–Ω—è –≤—Ä—É—á–Ω—É—é –æ—Ç–∫–ª—é—á–∏–ª–∏ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –æ—á–∏—â–∞—é –æ—á–µ—Ä–µ–¥—å!");
    });

    player.on("channelEmpty", (queue) => {
        queue.metadata.send("–í –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç, –ª–∏–≤–∞—é...");
    });

    player.on("queueEnd", (queue) => {
        const embed = new EmbedBuilder()
            .setTitle("–û—á–µ—Ä–µ–¥—å –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
            .setColor("#4188D2")
            .setDescription("–î–æ–±–∞–≤—å—Ç–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–æ–ª—å—à–µ –ø–µ—Å–µ–Ω")
            .setFooter({ text: "Based Music Bot", iconURL: "https://i.imgur.com/0PCQtit.png" });

        queue.metadata.send({ embeds: [embed] });
    });
};
